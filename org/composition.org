[[file:index.org][Back to index]]
* Microblock composition
Microblocks can be, and are supposed to be composed.
To explain this, the concept of a link must be made explicit.
** Links
   A link between two ports represents a connection between the ports.
   The connection, however, has nothing to do with networking.
   There is no 'flow' of data. Data remains in the iblocks and can be *accessed* by cblocks via connected ports.
   As an example, look at the following block composition.
   #+CAPTION: A generic link example
   [[file:img/generic/link.png]]

   The connection between the port of the iblock and the port of the cblock is called a link.
   This connection allows the cblock to access the data in the iblock *through* the port.
   Connections can be made between the following parts of blocks.
   - Between two ports (from a cblock to an iblock).
   - Between a port (of a cblock) and a configuration value
   - Between an output-trigger and an input-trigger
   These links are called 'valid'. Any other kinds of links are called 'invalid'.
   Note that connections are *one*-directional.
** Composition
   A composition is defined as the combination of microblocks with valid links.
   The following diagram provides an example of what a composition could look like.
   #+CAPTION: A generic composition example
   [[file:img/generic/composition.png]]

** Composition to form a new block
   A composition can also form a new block. This is where the power of microblocks comes from.
   The inner, unconnected ports of the composition are then viewed as outer ports of a greater block.
   The previous example can be made into a new block like in the following diagram.
   #+CAPTION: A generic composition block example
   [[file:img/generic/composition_block.png]]

   The resulting block happens to be a cblock.
   The 'links' that connect the internal blocks to the external structural primitives are quite different from the internal links.
   They are not a connection like the internal links. 
*** Connecting the dots
    When connecting the internal ports to ports of the composite, a lot is possible.
    It is enough to remember that such a 'connection' just means: "use the internal port instead".
    It is *not* like an inter-block link.

    - Internal config values either need to be connected to external config values *or* they need to be set when defining the composition.
    - When defining a composition with an input trigger, the input trigger of the composition needs to be connected to the input trigger of an internal block.
    - Any internal 'loose' ports, need to either be connected to external ports, *or* not be connected at all, in which case they don't have any effect.

    When defining a composite block, it is not possible to define any functionality inbetween the internal triggering of the first block and the external triggering.
    A composition is called 'pure' for exactly this reason.
** An example
   As an example, we will define a composite microblock that generates random bits using a LFSR (Linear Feedback Shift Register).

   A linear feedback register is depicted in the traditional data flow way as illustrated by the following diagram.
   #+CAPTION: An LFSR in a traditional data flow diagram.
   [[file:img/lfsr_traditional.png]]

   When simply translating the traditional data flow way of thinking into a microblocks composition, one might end up with something like this.
   (The meta-data ports are not depicted for simplicity sake.)
   #+CAPTION: An LFSR in microblocks, the wrong way.
   [[file:img/compositions/c_lfsr_bad_.png]]
  
   As you can see, this composition will have the effect that the data-flow diagram is trying to explain.
   It is, however, a *bad* example of how microblx compositions are supposed to work.
   There is still data 'flowing' between different data structures.
   Every bit gets its own iblock, which is 'overkill'.
   We can put every bit in the same data structure and redefine the composition to contain only one cblock and one iblock as follows.
   #+CAPTION: An LFSR in microblocks, the good way.
   [[file:img/compositions/c_lfsr.png]]

   In this composition, the iblock contains the register and its bits. The cblock then generates the bits like the data-flow diagram shows.
   This way, no data is moved between blocks unnecessarily and all computation is contained within a cblock.
